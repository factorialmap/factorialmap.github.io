{
  "hash": "d65257dc451a4b4199bfe2478c06f507",
  "result": {
    "markdown": "---\ntitle: \"Modelo preditivo usando com rede neural\"\nauthor: \"Marcelo Carvalho dos Anjos\"\ndate: \"2022-08-03\"\ncategories: [Modelos]\nimage: \"neural_class.png\"\n---\n\n\n### [**O que é um modelo de rede neural**]{style=\"color: #5AC8BE ;\"}\n\n-   Rede neural é uma técnica que usa nós interconectados ou neuronios em uma estrutura de camadas com o objetivo de resolver problemas de previsão.\n\n    ![Rede Neural - Regressão](neural_reg.png){width=\"605\"}\n\n    ![Rede Neural - Classificação](neural_class.png){width=\"605\"}\n\n### [**Qual o objetivo**]{style=\"color: #5AC8BE ;\"}\n\n-   A técnica é muito utilizada na solução de problemas de classificação ou seja, onde o resultado(desfecho) é uma classe (e.g. gato, cachorro, cavalo).\n\n-   Neste exemplo, nós temos uma linha de produção com sensores que registra características como largura e comprimento da pétala e sepala dos três tipos de flores iris: **setosa**, **versicolor** e **virgínica**.\n\n-   Nosso objetivo é fazer um modelo de previsão que com base nessas características, consiga classificar cada tipo de flor e separá-las corretamente.\n\n### [**De onde vem a demanda**]{style=\"color: #5AC8BE ;\"}\n\n-   Vem do uso de sistemas que utilizam visão computacional, processamento de linguagem natural como base para seu funcionamento ou melhoria como por exemplo veículos semi-autonomos, linhas de produção de veículos, controle de qualidade de autopeças entre outros.\n\n-   A primeira rede neural artificial foi implementada em 1958 por Frank Rosenblat e se chamava **Perceptron** e naquela época já se falava que era um embrião de um computador eletronico que seria capaz de andar, falar, ver, escrever e se reproduzir. [Materia New York Times](https://www.nytimes.com/1958/07/13/archives/electronic-brain-teaches-itself.html)\n\n### [**Como fazer**]{style=\"color: #5AC8BE ;\"}\n\nNeste exemplo usaremos os pacotes [tidyverse](https://www.tidyverse.org/), [janitor](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html), [tidymodels](https://www.tidymodels.org/), [nnet](https://cran.r-project.org/web/packages/nnet/index.html) e [neuralnettools](https://www.jstatsoft.org/article/view/v085i11)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# packages -------------------------------------------------------------\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(nnet)\nlibrary(NeuralNetTools)\n\n# data -------------------------------------------------------------------\ndata_iris <- iris %>% janitor::clean_names()\n\nsplit_iris <- initial_split(data_iris, strata = species)\ntrain_iris <- training(split_iris)\ntest_iris  <- testing(split_iris)\n\n# model ------------------------------------------------------------------\nmdl_fit_nn_iris <- nnet(species ~., \n                        data = train_iris, \n                        size = 5, \n                        decay = 0.01, \n                        maxit = 500)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# weights:  43\ninitial  value 147.734700 \niter  10 value 52.945564\niter  20 value 26.769894\niter  30 value 17.136233\niter  40 value 11.836506\niter  50 value 6.758372\niter  60 value 6.054320\niter  70 value 5.821805\niter  80 value 5.789431\niter  90 value 5.733911\niter 100 value 5.629667\niter 110 value 5.300392\niter 120 value 5.197445\niter 130 value 5.160252\niter 140 value 5.039001\niter 150 value 5.010833\niter 160 value 5.006860\niter 170 value 5.006174\niter 180 value 5.006124\nfinal  value 5.006123 \nconverged\n```\n:::\n:::\n\n\nVamos fazer uma previsão usando o modelo que construímos e jogar o resultado para dentro do dataframe de teste para podermos comparar entre o `previsto` vs `realizado`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# results ----------------------------------------------------------------\nmdl_fit_nn_iris %>% \n  predict(test_iris,type = \"class\") %>%\n  bind_cols(test_iris)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...1`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n         ...1 sepal_length sepal_width petal_length petal_width    species\n1      setosa          5.1         3.5          1.4         0.2     setosa\n2      setosa          4.9         3.0          1.4         0.2     setosa\n3      setosa          5.0         3.6          1.4         0.2     setosa\n4      setosa          4.9         3.1          1.5         0.1     setosa\n5      setosa          5.8         4.0          1.2         0.2     setosa\n6      setosa          5.7         3.8          1.7         0.3     setosa\n7      setosa          5.2         3.5          1.5         0.2     setosa\n8      setosa          5.4         3.4          1.5         0.4     setosa\n9      setosa          4.9         3.1          1.5         0.2     setosa\n10     setosa          4.9         3.6          1.4         0.1     setosa\n11     setosa          5.1         3.4          1.5         0.2     setosa\n12     setosa          5.0         3.5          1.6         0.6     setosa\n13     setosa          5.0         3.3          1.4         0.2     setosa\n14 versicolor          5.5         2.3          4.0         1.3 versicolor\n15 versicolor          6.3         3.3          4.7         1.6 versicolor\n16 versicolor          6.6         2.9          4.6         1.3 versicolor\n17 versicolor          5.0         2.0          3.5         1.0 versicolor\n18 versicolor          5.6         3.0          4.5         1.5 versicolor\n19 versicolor          6.1         2.8          4.7         1.2 versicolor\n20 versicolor          5.5         2.4          3.8         1.1 versicolor\n21 versicolor          5.8         2.7          3.9         1.2 versicolor\n22  virginica          6.0         2.7          5.1         1.6 versicolor\n23 versicolor          6.3         2.3          4.4         1.3 versicolor\n24 versicolor          6.1         3.0          4.6         1.4 versicolor\n25 versicolor          5.0         2.3          3.3         1.0 versicolor\n26 versicolor          5.7         3.0          4.2         1.2 versicolor\n27  virginica          5.8         2.7          5.1         1.9  virginica\n28  virginica          7.1         3.0          5.9         2.1  virginica\n29  virginica          6.5         3.0          5.8         2.2  virginica\n30  virginica          4.9         2.5          4.5         1.7  virginica\n31  virginica          5.8         2.8          5.1         2.4  virginica\n32  virginica          6.4         3.2          5.3         2.3  virginica\n33  virginica          6.1         3.0          4.9         1.8  virginica\n34  virginica          6.1         2.6          5.6         1.4  virginica\n35  virginica          6.4         3.1          5.5         1.8  virginica\n36  virginica          6.9         3.1          5.4         2.1  virginica\n37  virginica          6.9         3.1          5.1         2.3  virginica\n38  virginica          5.8         2.7          5.1         1.9  virginica\n39  virginica          6.2         3.4          5.4         2.3  virginica\n```\n:::\n:::\n\n\nComo já temos o dados previstos e também o real, podemos fazer uma a matriz de confusão para facilitar a visualização dos resultados e analisar o desempenho inicial do modelo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#confusion matrix\ntable(test_iris$species,\n      predict(mdl_fit_nn_iris,\n              newdata = test_iris, \n              type = \"class\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            \n             setosa versicolor virginica\n  setosa         13          0         0\n  versicolor      0         12         1\n  virginica       0          0        13\n```\n:::\n:::\n\n\nComo ficou o resultado da previsão ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#predict classes\npredict(mdl_fit_nn_iris, test_iris, type = \"class\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n [6] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n[11] \"setosa\"     \"setosa\"     \"setosa\"     \"versicolor\" \"versicolor\"\n[16] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n[21] \"versicolor\" \"virginica\"  \"versicolor\" \"versicolor\" \"versicolor\"\n[26] \"versicolor\" \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n[31] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n[36] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n```\n:::\n:::\n\n\nPlotando o modelo que acabamos de fazer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plotando o gráfico\nNeuralNetTools::plotnet(mdl_fit_nn_iris, circle_col = \"grey90\")\n```\n\n::: {.cell-output-display}\n![](neuralnet_files/figure-html/plot-neural-net-1.png){fig-alt='Plot da rede neural' width=5760}\n:::\n:::\n\n\n### [**Pra onde vai quem é o cliente**]{style=\"color: #5AC8BE ;\"}\n\n-   A próxima\n\n### [**Qual o resultado**]{style=\"color: #5AC8BE ;\"}\n\n-   Aperfeiçoar\n\n-   Facilitar\n\n-   Melhorar.\n",
    "supporting": [
      "neuralnet_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}